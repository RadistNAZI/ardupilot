# This config created for superfc board
# hw definition file for superfc hardware.
# Currently not on ardupilot but it is some
# progress is Betaflight.
# with thanks to Speedybee F4 v3 board for references
# MCU class and specific type

MCU STM32F4xx STM32F405xx

# We set a specific HAL_BOARD_SUBTYPE, allowing for custom config in
# drivers. For this to be used the subtype needs to be added to
# AP_HAL/AP_HAL_Boards.h as well.
#define CONFIG_HAL_BOARD_SUBTYPE HAL_BOARD_SUBTYPE_CHIBIOS_FMUV3

# Now we need to specify the APJ_BOARD_ID. This is the ID that the
# bootloader presents to GCS software so it knows if this firmware is
# suitable for the board. Please see
# https://github.com/ArduPilot/Bootloader/blob/master/hw_config.h for
# a list of current board IDs. If you add a new board type then please
# get it added to that repository so we don't get conflicts.

# Note that APJ is "ArduPilot JSON Firmware Format".

# board ID for firmware load
APJ_BOARD_ID 10055

# Now you need to say what crystal frequency you have for this
# board. All of the clocks are scaled against this. Typical values are
# 24000000 or 8000000.

# crystal frequency
OSCILLATOR_HZ 8000000

# On some boards you will need to also set the various PLL values. See
# the defaults in common/mcuconf.h, and use the define mechanism
# explained later in this file to override values suitable for your
# board. Refer to your MCU datasheet or examples from supported boards
# in ChibiOS for the right values.

# Now define the voltage the MCU runs at. This is needed for ChibiOS
# to set various internal driver limits. It is in 0.01 volt units.


# This is the STM32 timer that ChibiOS will use for the low level
# driver. This must be a 32 bit timer. We currently only support
# timers 2, 3, 4, 5 and 21. See hal_st_lld.c in ChibiOS for details.

# ChibiOS system timer
define STM32_ST_USE_TIMER 5

# Now the size of flash in kilobytes, for creating the ld.script.

# flash size
FLASH_SIZE_KB 1024

# Now define which UART is used for printf(). We rarely use printf()
# in ChibiOS, so this is really only for debugging very early startup
# in drivers.

# Serial port for stdout. This is optional. If you leave it out then
# output from printf() lines will go to the ArduPilot console, which is the
# first UART in the SERIAL_ORDER list.  But note that some startup code
# runs before USB is set up.
# The value for STDOUT_SERIAL is a serial device name, and must be for a
# serial device for which pins are defined in this file. For example, SD7
# is for UART7 (SD7 == "serial device 7" in ChibiOS).
#STDOUT_SERIAL SD7
#STDOUT_BAUDRATE 57600

# Now the USB setup, if you have USB. All of these settings are
# option, and the ones below are the defaults. It ends up creating a
# USB ID on Linux like this:
# /dev/serial/by-id/usb-ArduPilot_fmuv3_3E0031000B51353233343932-if00
# If creating a board for a RTF vehicle you may wish to customise these.

# USB setup
USB_STRING_MANUFACTURER "ArduPilot"

# Now define the order that I2C buses are presented in the hal.i2c API
# in ArduPilot. For historical reasons inherited from HAL_PX4 the
# 'external' I2C bus should be bus 1 in hal.i2c, and internal I2C bus
# should be bus 0. On fmuv3 the STM32 I2C1 is our external bus and
# I2C2 is our internal bus, so we need to setup the order as I2C2
# followed by I2C1 in order to achieve the conventional order that
# drivers expect.

# order of I2C buses
I2C_ORDER I2C1

# Now the serial ordering. These map to the SERIALn_ parameter numbers
# If you use a shorter list then HAL_Empty::UARTDriver
# objects are substituted for later UARTs, or you can leave a gap by
# listing one or more of the uarts as EMPTY.

# The normal usage of this ordering is:
# 1) SERIAL0: console (primary mavlink, usually USB)
# 2) SERIAL1: telem1
# 3) SERIAL2: telem2
# 4) SERIAL3: primary GPS
# 5) SERIAL4: GPS2
# 6) SERIAL5: extra UART (usually RTOS debug console)

# order of UARTs (and USB)
SERIAL_ORDER OTG1 USART1 USART2 USART3 UART4 UART5

# If the board has an IOMCU connected via a UART then this defines the
# UART to talk to that MCU. Leave it out for boards with no IOMCU.

# UART for IOMCU
#IOMCU_UART USART6

# Now we start on the pin definitions. Every pin used by ArduPilot
# needs to be in this file. The pins in this file can be defined in any order.

# The format is P+port+pin. So PC4 is portC pin4.
# For every pin the second column is the label. If this is a
# peripheral that has an alternate function defined in the STM32
# datasheet then the label must be the name of that alternative
# function. The names are looked up in the python database for this
# MCU. Please see STM32F427xx.py for the F427 database. That database
# is used to automatically fill in the alternative function (and later
# for the DMA channels).

# The third column is the peripheral type. This must be one of the
# following: UARTn, USARTn, OTGn, SPIn, I2Cn, ADCn, TIMn, SWD, SDIO,
# INPUT, OUTPUT, CS.

# The fourth and later columns are for modifiers on the pin. The
# possible modifiers are:
# pin speed: SPEED_VERYLOW, SPEED_LOW, SPEED_MEDIUM, SPEED_HIGH
# pullup: PULLUP, PULLDOWN, FLOATING
# out type: OPENDRAIN, PUSHPULL
# default value: LOW, HIGH

# Additionally, each class of pin peripheral can have extra modifiers
# suitable for that pin type. For example, for an OUTPUT you can map
# it to a GPIO number in hal.gpio using the GPIO(n) modifier. For ADC
# inputs you can apply a scaling factor (to bring it to unit volts)
# using the SCALE(x) modifier. See the examples below for more
# modifiers, or read the python code in chibios_hwdef.py.

# LEDs
PC14 LED_BLUE OUTPUT LOW GPIO(0)
PC15 LED_GREEN OUTPUT LOW GPIO(1)

define HAL_GPIO_A_LED_PIN 0
define HAL_GPIO_B_LED_PIN 1

# buzzer
PB0 BUZZER OUTPUT GPIO(80) LOW
define HAL_BUZZER_PIN 80

# OSD pad for TTL based OSD control, not supported by AP
PA4 CAM_C OUTPUT LOW GPIO(83)        # labelled as "CC"

# Now we define the pins that USB is connected on (SERIAL0).
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1

# Now we define UARTs

# USART1 (SERIAL1)
PA9 USART1_TX USART1
PA10 USART1_RX USART1

# USART2 (SERIAL2)
#PA2 USART2_TX USART2
PA3 USART2_RX USART2

# USART3 (SERIAL3)
PC10 USART3_TX USART3 NODMA
PC11 USART3_RX USART3 NODMA

# UART4 (SERIAL4)
PA0 UART4_TX UART4 NODMA
PA1 UART4_RX UART4 NODMA

# UART5 (SERIAL5)
PC12 UART5_TX UART5 NODMA
PD2 UART5_RX UART5 NODMA

# Now define the primary battery connectors. The labels we choose here
# are used to create defines for pins in the various drivers, so
# choose names that match existing board setups where possible. Here
# we define two pins PA2 and PA3 for voltage and current sensing, with
# a scale factor of 1.0 and connected on ADC1. The pin number this
# maps to in hal.adc is automatically determined using the datasheet
# tables in STM32F427xx.py.

PC2 BATT_VOLTAGE_SENS ADC1 SCALE(1)
PC1 BATT_CURRENT_SENS ADC1 SCALE(1)

# This is the pin that senses USB being connected. It is an input pin
# setup as OPENDRAIN.
#PA9 VBUS INPUT OPENDRAIN

# These are the pins for SWD debugging with a STlinkv2 or black-magic probe.
#PA13 JTMS-SWDIO SWD
#PA14 JTCK-SWCLK SWD

# Now the first I2C bus. The pin speeds are automatically setup
# correctly, but can be overridden here if needed.

# the 1st I2C bus
PB6 I2C1_SCL I2C1
PB7 I2C1_SDA I2C1

# the 2nd I2C bus
#PB10 I2C2_SCL I2C2
#PB11 I2C2_SDA I2C2

# the 1st SPI bus for IMU BMI270
PA5 SPI1_SCK SPI1
PA6 SPI1_MISO SPI1
PA7 SPI1_MOSI SPI1
#PC4 TODO: need to add EXT INT
PB11 BMI270_CS CS

# the 2nd SPI bus for OSD MAX7456
PB13 SPI2_SCK SPI2
PB14 SPI2_MISO SPI2
PB15 SPI2_MOSI SPI2
PB10 MAX7456_CS CS

# the 3rd SPI bus for Flash SDCARD
PB3 SPI3_SCK SPI3
PB4 SPI3_MISO SPI3
PB5 SPI3_MOSI SPI3
PC0 SDCARD_CS CS

# Now we start defining some PWM pins. We also map these pins to GPIO
# values, so users can set BRD_PWM_COUNT to choose how many of the PWM
# outputs on the primary MCU are setup as PWM and how many as
# GPIOs. To match HAL_PX4 we number the GPIOs for the PWM outputs
# starting at 50.
PC6 TIM3_CH1 TIM3 PWM(1) GPIO(50)
PC7 TIM3_CH2 TIM3 PWM(2) GPIO(51)
PC8 TIM3_CH3 TIM3 PWM(3) GPIO(52)
PC9 TIM3_CH4 TIM3 PWM(4) GPIO(53)
PA15 TIM2_CH1 TIM2 PWM(5) GPIO(54)
PA8 TIM1_CH1 TIM1 PWM(6) GPIO(55)

define HAL_STORAGE_SIZE 15360
STORAGE_FLASH_PAGE 1

# reserve 16k for bootloader and 32k for flash storage
FLASH_RESERVE_START_KB 48

# one IMU
IMU BMI270 SPI:bmi270 ROTATION_ROLL_180

# built-in barometer
BARO SPL06  I2C:0:0x76
define AP_BARO_BACKEND_DEFAULT_ENABLED 0
define AP_BARO_SPL06_ENABLED 1

# no built-in compass, but probe the i2c bus for all possible
# external compass types
define ALLOW_ARM_NO_COMPASS
define HAL_PROBE_EXTERNAL_I2C_COMPASSES
define HAL_I2C_INTERNAL_MASK 0

# Motor order implies Betaflight/X for standard ESCs
define HAL_FRAME_TYPE_DEFAULT 12

# SPI devices
SPIDEV bmi270    SPI1 DEVID1 BMI270_CS MODE3 1*MHZ 8*MHZ
SPIDEV osd       SPI2 DEVID1 MAX7456_CS MODE0 10*MHZ 10*MHZ
SPIDEV sdcard    SPI2 DEVID2 SDCARD_CS  MODE0 400*KHZ 25*MHZ

# filesystem setup on sdcard
define HAL_OS_FATFS_IO 1

# setup for OSD
define OSD_ENABLED 1
define HAL_OSD_TYPE_DEFAULT 1
ROMFS_WILDCARD libraries/AP_OSD/fonts/font*.bin

# minimal drivers to reduce flash usage
include ../include/minimize_fpv_osd.inc
include ../include/no_bootloader_DFU.inc
undef AP_BATTERY_SYNTHETIC_CURRENT_ENABLED
define AP_BATTERY_SYNTHETIC_CURRENT_ENABLED 0

define DEFAULT_NTF_LED_TYPES 257
